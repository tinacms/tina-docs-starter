# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  docs(relativePath: String): Docs!
  docsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DocsFilter): DocsConnection!
}

input DocumentFilter {
  docs: DocsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Docs | Folder

type Docs implements Node & Document {
  title: String
  section: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DocsBodyCalloutFilter {
  type: StringFilter
  text: StringFilter
}

input DocsBodyButtonFilter {
  type: StringFilter
  text: StringFilter
  url: StringFilter
}

input DocsBodyVideoPlayerFilter {
  url: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DocsBodyHeroFilter {
  backgroundImageUrl: ImageFilter
  slogan: StringFilter
  teaser: StringFilter
  btnUrl: StringFilter
  btnTxt: StringFilter
}

input DocsBodyFeatureSectionFeatureListFilter {
  image: ImageFilter
  title: StringFilter
  desc: StringFilter
}

input DocsBodyFeatureSectionFilter {
  featureList: DocsBodyFeatureSectionFeatureListFilter
}

input DocsBodyFilter {
  Callout: DocsBodyCalloutFilter
  Button: DocsBodyButtonFilter
  VideoPlayer: DocsBodyVideoPlayerFilter
  Hero: DocsBodyHeroFilter
  FeatureSection: DocsBodyFeatureSectionFilter
}

input DocsFilter {
  title: StringFilter
  section: StringFilter
  body: DocsBodyFilter
}

type DocsConnectionEdges {
  cursor: String!
  node: Docs
}

type DocsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateDocs(relativePath: String!, params: DocsMutation!): Docs!
  createDocs(relativePath: String!, params: DocsMutation!): Docs!
}

input DocumentUpdateMutation {
  docs: DocsMutation
  relativePath: String
}

input DocumentMutation {
  docs: DocsMutation
}

input DocsMutation {
  title: String
  section: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
